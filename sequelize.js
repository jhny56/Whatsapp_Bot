
module.exports = {
    createUser,
    destroyUser,
    addUserInfo,
    userExist,
    getUserInfo,

}


const Sequelize = require('sequelize');
const sequelize = new Sequelize('whatsappbot_db','root','Password',{
    dialect : "mysql", //database engine
    define: { //this define every table we create
        freezeTableName : true, //this makes a table with a table name exactly like the one we specified (users)
        timestamps : false, //remove the UpdatedAt and CreatedAt columns that were generated by default
    }

    // host : 'localhost',
    // port : 3306
}); 
const { Model, DataTypes, Deferrable } = require("sequelize"); //get intelisense of DataTypes and ...

//CONNECTING TO DATABASE
async function ConnectSequelize(){
    try{
        await sequelize.authenticate(); // sequelize.close() if we want to stop the connection
        console.log("Connecting succesfull");
    }catch(err){
        console.log("Error connecting :" , err);
    }
 
}
ConnectSequelize();

//MODEL
const User = sequelize.define('users', 
{ 
    phonenumber: {
        type: Sequelize.DataTypes.STRING,
        allowNull: false,
        primaryKey: true,

    },
    firstname: {
        type: Sequelize.DataTypes.STRING,
        defaultValue: false
    },
    lastname: {
        type: Sequelize.DataTypes.STRING,
        defaultValue: false
    },
    age: {
        type: Sequelize.DataTypes.INTEGER,
        defaultValue: false
    },
    subscribed: {
        type: Sequelize.DataTypes.BOOLEAN,
        defaultValue: false
    },
    news: {
        type: Sequelize.JSON,
        defaultValue: [],
    },
    option: {
        type: Sequelize.DataTypes.STRING,
        defaultValue: ''
    }
},
{

}
);

User.sync({alter: true}).then();


async function userExist(phonenumber){ //check if user exist on message
    let myuser = await User.findAll({
        raw : true,
        where : {phonenumber : phonenumber} 
    });

    if(myuser[0]){
        return true
    }
    else{
        return false
    }
}

async function createUser(phonenumber){
    await User.create({
        phonenumber : phonenumber,
    })
}

async function destroyUser(phonenumber){
    await User.destroy({
        where : {phonenumber : phonenumber}
    })
}

async function getUserInfo(phonenumber,userInfo){
    let myinfo = await User.findAll({
        attributes : [userInfo],
        raw : true,
        where : {phonenumber : phonenumber} 
    });
    if(myinfo[0]){
        return myinfo[0][userInfo];
    }
    else{
        return false;
    }

}

async function addUserInfo(phonenumber,userInfo, data){
    await User.update({
        [userInfo] : data
    },
    { 
        where: {phonenumber: phonenumber}
    })
}
